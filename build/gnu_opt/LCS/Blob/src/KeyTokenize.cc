#line 2 "/scratch/software/src/pyimager/build/gnu_opt/LCS/Blob/src/KeyTokenize.cc"

#line 4 "/scratch/software/src/pyimager/build/gnu_opt/LCS/Blob/src/KeyTokenize.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer KeyTokenize_create_buffer
#define yy_delete_buffer KeyTokenize_delete_buffer
#define yy_flex_debug KeyTokenize_flex_debug
#define yy_init_buffer KeyTokenize_init_buffer
#define yy_flush_buffer KeyTokenize_flush_buffer
#define yy_load_buffer_state KeyTokenize_load_buffer_state
#define yy_switch_to_buffer KeyTokenize_switch_to_buffer
#define yyin KeyTokenizein
#define yyleng KeyTokenizeleng
#define yylex KeyTokenizelex
#define yylineno KeyTokenizelineno
#define yyout KeyTokenizeout
#define yyrestart KeyTokenizerestart
#define yytext KeyTokenizetext
#define yywrap KeyTokenizewrap
#define yyalloc KeyTokenizealloc
#define yyrealloc KeyTokenizerealloc
#define yyfree KeyTokenizefree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE KeyTokenizerestart(KeyTokenizein  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int KeyTokenizeleng;

extern FILE *KeyTokenizein, *KeyTokenizeout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up KeyTokenizetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up KeyTokenizetext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via KeyTokenizerestart()), so that the user can continue scanning by
	 * just pointing KeyTokenizein at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when KeyTokenizetext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int KeyTokenizeleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow KeyTokenizewrap()'s to do buffer switches
 * instead of setting up a fresh KeyTokenizein.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void KeyTokenizerestart (FILE *input_file  );
void KeyTokenize_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE KeyTokenize_create_buffer (FILE *file,int size  );
void KeyTokenize_delete_buffer (YY_BUFFER_STATE b  );
void KeyTokenize_flush_buffer (YY_BUFFER_STATE b  );
void KeyTokenizepush_buffer_state (YY_BUFFER_STATE new_buffer  );
void KeyTokenizepop_buffer_state (void );

static void KeyTokenizeensure_buffer_stack (void );
static void KeyTokenize_load_buffer_state (void );
static void KeyTokenize_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER KeyTokenize_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE KeyTokenize_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE KeyTokenize_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE KeyTokenize_scan_bytes (yyconst char *bytes,int len  );

void *KeyTokenizealloc (yy_size_t  );
void *KeyTokenizerealloc (void *,yy_size_t  );
void KeyTokenizefree (void *  );

#define yy_new_buffer KeyTokenize_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        KeyTokenizeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            KeyTokenize_create_buffer(KeyTokenizein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        KeyTokenizeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            KeyTokenize_create_buffer(KeyTokenizein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *KeyTokenizein = (FILE *) 0, *KeyTokenizeout = (FILE *) 0;

typedef int yy_state_type;

extern int KeyTokenizelineno;

int KeyTokenizelineno = 1;

extern char *KeyTokenizetext;
#define yytext_ptr KeyTokenizetext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up KeyTokenizetext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	KeyTokenizeleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[320] =
    {   0,
       21,   21,   26,   24,   21,   21,   24,   24,   15,   24,
       24,   18,   15,   11,   24,   17,   14,   13,   12,   19,
       24,   20,   21,    0,   23,   16,    0,   22,   15,    0,
        0,    0,    0,   11,    0,    1,   10,    0,    0,   10,
       11,    0,   15,    9,    8,    0,    0,    2,   14,    0,
        0,    0,    0,    0,    0,   10,   10,    0,    9,    8,
       10,    0,   15,    1,   15,    0,    0,    0,    0,    0,
        0,    0,    0,   10,   15,    0,   10,    0,    0,    7,
        0,    0,    2,    0,    0,    0,    0,   10,    0,    1,
       10,    0,   10,    7,    0,    0,    1,    0,    1,    1,

       15,    1,    0,   10,    0,    0,    0,    0,    0,    4,
        0,    0,    0,    0,    0,    6,   10,   10,   15,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    2,    0,    2,   10,   10,    0,   10,    0,    1,
        1,    0,    1,   15,    1,   15,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    0,    4,    1,    0,    6,    0,   10,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    2,   10,    1,
        0,    1,    0,    1,    0,    1,   15,    0,    1,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,    0,   10,    0,    1,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    3,
        0,    0,    0,    0,    0,    0,    5,    2,    0,    2,
        0,    0,    2,    0,    1,    1,    0,    1,    0,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    1,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    2,    0,    1,    0,    0,
        0,    0,    0,    1,    0,    0,    1,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,    0,    1,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    1,    1,    7,    1,
        1,    1,    8,    9,   10,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,    1,
       14,    1,    1,    1,   15,   15,   15,   15,   16,   17,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   18,   15,   15,   15,   15,   15,   15,
       19,   20,   21,    1,   15,    1,   15,   15,   15,   15,

       16,   22,   15,   15,   23,   23,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,    1,    1,    1,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[24] =
    {   0,
        1,    1,    2,    3,    1,    4,    5,    1,    1,    1,
        4,    4,    1,    1,    4,    4,    4,    4,    1,    4,
        1,    4,    4
    } ;

static yyconst flex_int16_t yy_base[330] =
    {   0,
        0,    0,  804,  805,   22,   24,   25,  800,  782,   27,
       27,  805,   32,   47,   63,  805,   25,   66,    0,  805,
        0,  805,   30,   43,   44,   74,  798,  805,  780,    0,
       47,  787,   72,   79,  786,   95,   97,  106,  111,  116,
        0,    0,  125,  130,  777,  784,   81,  146,    0,  792,
      791,  789,  785,   88,  779,  151,  167,  117,   75,  805,
      100,  183,  131,  190,  136,   58,  137,  203,  142,  152,
      216,  778,  777,  118,  208,  213,  154,  232,  237,  768,
      161,  221,  239,  784,  783,  781,  777,  139,  226,  172,
      160,  250,  169,  805,  771,  255,  257,  770,  176,  272,

      273,  761,  279,  768,  764,  759,  188,  284,  285,  805,
      751,  745,  241,  300,  291,  805,  313,  326,  294,  301,
      727,  713,  189,  307,  339,  214,  310,  351,  703,  702,
      362,  377,  318,  805,    0,  701,  323,  697,  259,  388,
      403,  331,  805,  336,  225,  378,  404,  260,  695,  341,
      414,  342,  419,  420,  108,  348,  425,  354,  426,  431,
      186,  436,  441,  805,  452,  446,  805,  457,  683,  666,
      659,  641,  464,  479,  462,  607,  604,  587,  490,  505,
      480,  573,  360,  506,  274,  516,  521,  379,  573,  386,
      522,  391,  527,  428,  528,  568,  533,  534,  566,  513,

      461,  539,  223,  540,  545,  254,  508,  481,  546,  309,
      551,  552,  322,  497,  496,  482,  557,  357,  473,  487,
      558,  369,  470,  467,  563,  405,  564,  569,  449,  805,
      571,  576,  507,  581,  582,  583,  805,  585,  594,  586,
      599,  602,  601,  445,    0,  603,  609,  610,  443,  616,
      430,  411,  617,  406,  626,  383,  397,  619,  371,  629,
      385,  370,  631,  636,  363,  633,  642,  335,  639,  648,
      645,  651,  656,  653,  328,  657,  664,  665,  671,  676,
      668,  315,    0,  302,  681,  680,  293,  682,  286,  266,
      247,  688,  693,  694,  700,  710,  488,    0,  242,  711,

      712,  240,    0,  218,  718,  715,  205,  191,  723,  174,
      103,  728,   85,   76,   67,   62,   49,   44,  805,  740,
      745,   45,  750,   37,  755,  760,  765,  769,  774
    } ;

static yyconst flex_int16_t yy_def[330] =
    {   0,
      319,    1,  319,  319,  319,  319,  320,  321,  322,  323,
      319,  319,  322,  319,  319,  319,  324,  324,   18,  319,
      325,  319,  319,  320,  319,  319,  321,  319,  322,  325,
      323,  319,  319,  319,  319,   13,   14,  319,  319,   37,
       14,   15,   13,   43,  322,  319,  319,  319,   18,  326,
      327,  328,  329,  319,  319,  319,  319,  319,  319,  319,
       56,  319,   43,  319,   43,   38,  319,  319,   39,  319,
      319,   38,   39,   37,   43,  319,   37,  319,  319,  322,
       48,  319,  319,  326,  327,  328,  329,   56,  319,   62,
       61,  319,   56,  319,  319,  319,  319,  319,   64,   99,

       43,  322,  319,   77,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,   56,   56,   43,  319,
       77,  319,   78,  319,  319,   79,  319,  319,  319,  319,
      319,  319,  319,  319,   88,   93,  319,   93,  319,  319,
      319,  319,  319,   43,   99,   43,  319,   99,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,   77,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  131,  319,  319,  319,   93,  140,
      319,  140,  319,  319,  319,  148,   43,  319,  148,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,   62,   97,  319,   93,   62,   97,
      319,   93,  319,  319,  319,  173,  319,  319,  319,  319,
      319,  319,  179,  319,  319,  319,  319,  131,  319,  319,
      319,  319,  319,  319,  190,  319,  319,  319,  319,  319,
      148,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  216,  319,  319,  220,  319,  319,  173,  319,
      319,  319,  319,  319,  319,  179,  319,  319,  319,  319,
      319,  319,  238,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  294,  269,  319,  319,

      319,  319,  276,  319,  319,  319,  319,  319,  319,  294,
      319,  319,  297,  319,  319,  319,  319,  319,    0,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319
    } ;

static yyconst flex_int16_t yy_nxt[829] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   11,
       13,   14,   15,   16,   17,   17,   18,   19,   20,   21,
       22,   17,   17,   23,   23,   23,   23,   25,   26,   25,
       29,   23,   23,   26,   32,   29,   32,   33,   34,   35,
       49,   35,   36,   37,   30,   25,   26,   50,   29,   25,
       51,   30,   29,   26,   38,  313,   39,   40,   41,   42,
      310,   29,   43,   44,   29,  105,   30,  105,   44,   45,
       46,   29,   46,  306,   47,   48,   29,   52,  301,   55,
       53,   55,   78,   56,   79,   30,   38,  297,   39,   57,
       34,   42,   47,   48,   58,   59,  313,   94,   88,   54,

       59,   60,   62,   58,   62,   63,   64,   36,   37,  319,
       90,   61,   65,   66,  294,   66,   67,   68,   69,  155,
       69,   70,   71,   72,   76,   73,   76,   74,   93,   74,
      110,   75,   76,  119,   76,   29,   77,   78,   98,   79,
       98,   29,   99,  103,  106,  103,  106,  104,  107,  111,
      135,  111,   80,   81,   92,   81,   82,   83,   38,  112,
       39,  112,   56,  113,   29,   77,   89,   59,  129,   29,
      129,   91,   59,   60,   72,  137,   73,   90,   91,   62,
       93,   62,   92,   59,  319,  310,   29,   99,   59,   60,
       95,  144,   95,   96,   97,   29,  171,  161,  171,  107,

      100,   64,  286,  151,   29,  101,  102,   29,  116,   30,
      110,  102,   29,  108,   68,  120,  281,  120,  109,  121,
      122,  177,  122,  177,   93,  110,  114,   71,  130,  278,
      130,  115,  131,  103,  203,  103,  145,  136,  116,  123,
      197,  123,  124,  125,  126,  110,  126,  127,  128,  132,
       83,  274,  113,  271,  133,  134,  157,  120,  261,  120,
      134,  138,   98,  116,   98,  206,  140,  141,   97,  190,
      139,  148,  142,  143,  142,   29,  110,  256,  143,   98,
      147,   98,  147,  145,  148,  185,  149,  146,  149,  241,
      136,  106,  154,  106,  154,  152,  155,  288,  160,  153,

      160,  168,  161,  168,  243,  169,  110,  112,  170,  112,
      170,  158,  138,  240,  172,  159,  172,  178,  173,  178,
      210,  179,  116,  162,  117,  187,  236,  187,  163,  188,
      168,  116,  168,  213,  189,  164,  165,  118,  147,  229,
      147,  166,  194,  195,  116,  195,  222,  196,  167,  174,
      125,  201,  150,  152,  175,  176,  109,  204,  208,  156,
      176,  180,  128,  115,  110,  158,  181,  182,  218,  211,
      238,  183,  182,  131,  218,  133,  116,  184,  134,  164,
      222,  213,  210,  134,  130,  198,  130,  198,  185,  199,
      188,  167,  186,  134,  256,  134,  261,  245,  134,  140,

      134,  193,  192,  191,  143,  110,  247,  116,  206,  143,
       98,  200,   98,  200,  192,  194,  226,  203,  193,  143,
      272,  202,  248,  202,  143,  203,  205,  207,  205,  207,
      206,  155,  209,  212,  209,  212,  210,  213,  214,  194,
      214,  251,  161,  215,  143,  215,   96,  216,  217,  143,
      217,  153,  218,  221,  246,  221,  188,  222,  110,  219,
      229,  219,   96,  220,  223,  176,  223,  159,  189,  228,
      176,  228,  253,  229,  116,  173,  153,  269,  224,  225,
      176,  189,  175,  110,  266,  176,  172,  235,  172,  235,
      226,  236,  258,  216,  227,  176,  159,  264,  220,  297,

      176,  179,  267,  116,  110,  232,  182,  263,  161,  116,
      116,  182,  178,  239,  178,  239,  233,  240,  233,  155,
      234,  182,  279,  242,  194,  242,  182,  243,  244,  195,
      244,  195,  188,  246,  198,  249,  198,  249,  248,  246,
      250,  252,  250,  252,  251,  248,  254,  255,  254,  255,
      203,  256,  257,  259,  257,  259,  206,  210,  260,  262,
      260,  262,  261,  213,  265,  268,  265,  268,  218,  222,
      270,  273,  270,  273,  271,  274,  275,  199,  275,  196,
      229,  276,  231,  277,  189,  277,  181,  278,  280,  282,
      280,  282,  281,  236,  236,  237,  283,  240,  179,  182,

      186,  284,  134,  284,  182,  240,  285,  134,  285,  287,
      286,  287,  243,  243,  246,  231,  250,  134,  250,  143,
      288,  248,  134,  289,  143,  289,  143,  288,  253,  230,
      258,  143,  153,  290,  159,  290,  291,  256,  291,  110,
      261,  116,  263,  293,  266,  293,  292,  294,  295,  296,
      298,  296,  173,  297,  227,  299,  271,  299,  300,  271,
      300,  176,  301,  302,  274,  302,  176,  274,  303,  176,
      224,  304,  234,  304,  176,  278,  278,  138,  305,  281,
      305,  182,  306,  307,  182,  307,  182,  281,  308,  182,
      308,  286,  286,  288,  169,  309,  134,  309,  143,  310,

      311,  134,  311,  143,  294,  294,  136,  312,  138,  312,
      143,  313,  136,  131,  183,  143,  110,  314,  315,  314,
      315,  297,  301,  301,   93,  316,  306,  316,  176,  306,
      317,  182,  317,  176,  310,  318,  182,  318,  121,  313,
       24,   24,   24,   24,   24,   27,   27,   27,   27,   27,
       31,   31,   31,   31,   31,   29,  113,   29,   29,   29,
       84,   84,  156,   84,   84,   85,   85,   85,   85,   86,
      107,   86,   86,   86,   87,  150,   87,   87,   87,  104,
       30,  140,  139,   26,   26,   25,   25,   30,  118,  117,
       56,   26,   26,   25,   25,   47,   30,   61,   54,   30,

       28,   30,   28,  319,    3,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319
    } ;

static yyconst flex_int16_t yy_chk[829] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    6,    6,    7,    7,   10,
       17,   23,   23,   10,   11,   17,   11,   11,   11,   13,
      324,   13,   13,   13,   17,   24,   24,   25,  322,   31,
       25,   13,   14,   31,   14,  318,   14,   14,   14,   14,
      317,   14,   14,   14,   14,   66,   14,   66,   14,   14,
       15,   18,   15,  316,   15,   15,   18,   26,  315,   33,
       26,   33,   59,   33,   59,   18,   34,  314,   34,   34,
       34,   34,   47,   47,   34,   34,  313,   59,   54,   54,

       34,   34,   36,   54,   36,   36,   36,   37,   37,   37,
       61,   61,   37,   38,  311,   38,   38,   38,   39,  155,
       39,   39,   39,   40,   58,   40,   58,   40,   58,   74,
      155,   40,   43,   74,   43,   43,   43,   44,   63,   44,
       63,   44,   63,   65,   67,   65,   67,   65,   67,   69,
       88,   69,   44,   48,   88,   48,   48,   48,   56,   70,
       56,   70,   56,   70,   77,   77,   56,   56,   81,   77,
       81,   91,   56,   56,   57,   91,   57,   57,   57,   90,
       93,   90,   57,   57,   93,  310,   99,   99,   57,   57,
       62,   99,   62,   62,   62,   64,  123,  161,  123,  107,

       64,   64,  308,  107,   64,   64,   64,   64,  161,   64,
      107,   64,   64,   68,   68,   75,  307,   75,   68,   75,
       76,  126,   76,  126,   76,   68,   71,   71,   82,  304,
       82,   71,   82,   89,  203,   89,  145,   89,   71,   78,
      145,   78,   78,   78,   79,  203,   79,   79,   79,   83,
       83,  302,  113,  299,   83,   83,  113,   92,  291,   92,
       83,   92,   96,  113,   96,  206,   96,   97,   97,  139,
      139,  148,   97,   97,  139,  148,  206,  290,   97,  100,
      101,  100,  101,  100,  101,  185,  103,  100,  103,  185,
      103,  108,  109,  108,  109,  108,  109,  289,  115,  108,

      115,  119,  115,  119,  287,  119,  108,  114,  120,  114,
      120,  114,  120,  284,  124,  114,  124,  127,  124,  127,
      210,  127,  114,  117,  117,  133,  282,  133,  117,  133,
      137,  210,  137,  213,  137,  117,  118,  118,  142,  275,
      142,  118,  142,  144,  213,  144,  268,  144,  118,  125,
      125,  150,  150,  152,  125,  125,  150,  152,  156,  156,
      125,  128,  128,  156,  152,  158,  128,  128,  218,  158,
      183,  183,  128,  131,  265,  183,  158,  131,  131,  218,
      222,  262,  259,  131,  132,  146,  132,  146,  132,  146,
      188,  222,  132,  132,  256,  188,  261,  190,  132,  140,

      188,  190,  192,  140,  140,  256,  192,  261,  257,  140,
      141,  147,  141,  147,  141,  147,  226,  254,  141,  141,
      226,  151,  252,  151,  141,  151,  153,  154,  153,  154,
      153,  154,  157,  159,  157,  159,  157,  159,  160,  194,
      160,  251,  160,  162,  194,  162,  162,  162,  163,  194,
      163,  162,  163,  166,  249,  166,  244,  166,  162,  165,
      229,  165,  165,  165,  168,  229,  168,  165,  168,  175,
      229,  175,  201,  175,  165,  173,  201,  224,  224,  173,
      173,  223,  224,  201,  219,  173,  174,  181,  174,  181,
      174,  181,  208,  216,  174,  174,  208,  216,  220,  297,

      174,  179,  220,  208,  216,  179,  179,  215,  214,  220,
      297,  179,  180,  184,  180,  184,  180,  184,  233,  207,
      180,  180,  233,  186,  200,  186,  180,  186,  187,  191,
      187,  191,  187,  191,  193,  195,  193,  195,  193,  195,
      197,  198,  197,  198,  197,  198,  202,  204,  202,  204,
      202,  204,  205,  209,  205,  209,  205,  209,  211,  212,
      211,  212,  211,  212,  217,  221,  217,  221,  217,  221,
      225,  227,  225,  227,  225,  227,  228,  199,  228,  196,
      228,  231,  231,  232,  189,  232,  231,  232,  234,  235,
      234,  235,  234,  235,  236,  182,  238,  240,  178,  236,

      238,  239,  240,  239,  236,  239,  241,  240,  241,  242,
      241,  242,  243,  242,  246,  177,  247,  243,  247,  246,
      247,  248,  243,  250,  246,  250,  248,  250,  253,  176,
      258,  248,  253,  255,  258,  255,  260,  255,  260,  253,
      260,  258,  263,  264,  266,  264,  263,  264,  266,  267,
      269,  267,  172,  267,  269,  270,  271,  270,  272,  270,
      272,  271,  272,  273,  274,  273,  271,  273,  276,  274,
      171,  277,  276,  277,  274,  277,  278,  170,  279,  281,
      279,  278,  279,  280,  281,  280,  278,  280,  285,  281,
      285,  286,  285,  288,  169,  292,  286,  292,  288,  292,

      293,  286,  293,  288,  293,  294,  149,  295,  138,  295,
      294,  295,  136,  130,  129,  294,  294,  296,  300,  296,
      300,  296,  300,  301,  122,  305,  306,  305,  301,  305,
      309,  306,  309,  301,  309,  312,  306,  312,  121,  312,
      320,  320,  320,  320,  320,  321,  321,  321,  321,  321,
      323,  323,  323,  323,  323,  325,  112,  325,  325,  325,
      326,  326,  111,  326,  326,  327,  327,  327,  327,  328,
      106,  328,  328,  328,  329,  105,  329,  329,  329,  104,
      102,   98,   95,   87,   86,   85,   84,   80,   73,   72,
       55,   53,   52,   51,   50,   46,   45,   35,   32,   29,

       27,    9,    8,    3,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int KeyTokenize_flex_debug;
int KeyTokenize_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *KeyTokenizetext;
#line 1 "KeyTokenize.ll"
/*
//# KeyTokenize.ll: Scanner for key=value line
//#
//# Copyright (C) 2004
//# ASTRON (Netherlands Foundation for Research in Astronomy)
//# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//#
//# This program is free software; you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or
//# (at your option) any later version.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program; if not, write to the Free Software
//# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#
//# $Id: KeyTokenize.ll 26375 2013-09-05 11:38:09Z loose $
*/
/* yy_unput is not used, so let flex not generate it, otherwise picky
   compilers will issue warnings. */
#define YY_NO_INPUT 1
#line 30 "KeyTokenize.ll"
#include <Blob/KeyValue.h>
#include <Blob/KeyValueMap.h>
#include <Blob/KeyParser.h>
#include "KeyParse.h"           // output of bison
#include <Common/lofar_iostream.h>
using namespace LOFAR;

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=KeyParser::input(buf,max_size)

#undef YY_DECL
#define YY_DECL int KeyTokenizelex (YYSTYPE* lvalp)
#line 803 "/scratch/software/src/pyimager/build/gnu_opt/LCS/Blob/src/KeyTokenize.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int KeyTokenizelex_destroy (void );

int KeyTokenizeget_debug (void );

void KeyTokenizeset_debug (int debug_flag  );

YY_EXTRA_TYPE KeyTokenizeget_extra (void );

void KeyTokenizeset_extra (YY_EXTRA_TYPE user_defined  );

FILE *KeyTokenizeget_in (void );

void KeyTokenizeset_in  (FILE * in_str  );

FILE *KeyTokenizeget_out (void );

void KeyTokenizeset_out  (FILE * out_str  );

int KeyTokenizeget_leng (void );

char *KeyTokenizeget_text (void );

int KeyTokenizeget_lineno (void );

void KeyTokenizeset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int KeyTokenizewrap (void );
#else
extern int KeyTokenizewrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( KeyTokenizetext, KeyTokenizeleng, 1, KeyTokenizeout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( KeyTokenizein )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( KeyTokenizein ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, KeyTokenizein))==0 && ferror(KeyTokenizein)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(KeyTokenizein); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int KeyTokenizelex (void);

#define YY_DECL int KeyTokenizelex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after KeyTokenizetext and KeyTokenizeleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 73 "KeyTokenize.ll"


 /* quit on EOF */
#line 992 "/scratch/software/src/pyimager/build/gnu_opt/LCS/Blob/src/KeyTokenize.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! KeyTokenizein )
			KeyTokenizein = stdin;

		if ( ! KeyTokenizeout )
			KeyTokenizeout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			KeyTokenizeensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				KeyTokenize_create_buffer(KeyTokenizein,YY_BUF_SIZE );
		}

		KeyTokenize_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of KeyTokenizetext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 320 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 805 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
#line 76 "KeyTokenize.ll"
{
            yyterminate();
          }
	YY_BREAK
/* Literals */
case 1:
YY_RULE_SETUP
#line 81 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue (KeyTokenizetext, KeyValue::DMS);
	    return LITERAL;
	  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 86 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue (KeyTokenizetext, KeyValue::HMS);
	    return LITERAL;
	  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 91 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            float valr,vali;
	    sscanf(KeyTokenizetext, "%f%*c+%f%*c", &valr, &vali);
            lvalp->val = new KeyValue (makefcomplex(valr, vali));
	    return LITERAL;
	  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            double valr,vali;
	    sscanf(KeyTokenizetext, "%lf+%lf", &valr, &vali);
            lvalp->val = new KeyValue (makedcomplex(valr, vali));
	    return LITERAL;
	  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 105 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            float valr,vali;
	    sscanf(KeyTokenizetext, "%f%*c-%f%*c", &valr, &vali);
            lvalp->val = new KeyValue (makefcomplex(valr, -vali));
	    return LITERAL;
	  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 112 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            double valr,vali;
	    sscanf(KeyTokenizetext, "%lf-%lf", &valr, &vali);
            lvalp->val = new KeyValue (makedcomplex(valr, -vali));
	    return LITERAL;
	  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 119 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            float vali;
	    sscanf(KeyTokenizetext, "%f%*c", &vali);
            lvalp->val = new KeyValue (makefcomplex(0., vali));
	    return LITERAL;
	  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            double vali;
	    sscanf(KeyTokenizetext, "%lf", &vali);
            lvalp->val = new KeyValue (makedcomplex(0., vali));
	    return LITERAL;
	  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 133 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            float val;
	    sscanf(KeyTokenizetext, "%f%*c", &val);
            lvalp->val = new KeyValue (val);
	    return LITERAL;
	  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            double val;
	    sscanf(KeyTokenizetext, "%lf", &val);
            lvalp->val = new KeyValue (val);
	    return LITERAL;
	  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            int ival = atoi(KeyTokenizetext);
            double dval = atof(KeyTokenizetext);
            /* Handle integers exceeding integer precision as doubles */
            if (ival < dval-0.1  ||  ival > dval+0.1) {
                lvalp->val = new KeyValue (dval);
            } else {
                lvalp->val = new KeyValue (ival);
            }
            return LITERAL;
	  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 159 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue (true);
	    return LITERAL;
	  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 164 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue (false);
	    return LITERAL;
	  }
	YY_BREAK
/*
 Strings can have quotes which have to be removed.
 Names can have escape characters to be removed.
 */
case 14:
YY_RULE_SETUP
#line 174 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue (KeyTokenizetext);
	    return NAME;
	  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 179 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue
                         (KeyParser::removeEscapes (KeyTokenizetext));
	    return NAME;
	  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 185 "KeyTokenize.ll"
{
            KeyParser::position() += KeyTokenizeleng;
            lvalp->val = new KeyValue
                         (KeyParser::removeQuotes (KeyTokenizetext));
	    return LITERAL;
	  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 192 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; return IS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 194 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; return COMMA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 196 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; return LBRACKET; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; return RBRACKET; }
	YY_BREAK
/* Whitespace is skipped */
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 201 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; }
	YY_BREAK
/* Comments are skipped */
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 204 "KeyTokenize.ll"
{ KeyParser::position() += KeyTokenizeleng; }
	YY_BREAK
/* An unterminated string is an error */
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 207 "KeyTokenize.ll"
{ throw "KeyTokenize: Unterminated string"; }
	YY_BREAK
/* Any other character is invalid */
case 24:
YY_RULE_SETUP
#line 210 "KeyTokenize.ll"
{ return TOKENERROR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 212 "KeyTokenize.ll"
ECHO;
	YY_BREAK
#line 1307 "/scratch/software/src/pyimager/build/gnu_opt/LCS/Blob/src/KeyTokenize.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed KeyTokenizein at a new source and called
			 * KeyTokenizelex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = KeyTokenizein;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( KeyTokenizewrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * KeyTokenizetext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of KeyTokenizelex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					KeyTokenizerealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			KeyTokenizerestart(KeyTokenizein  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) KeyTokenizerealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 320 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 320 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 319);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					KeyTokenizerestart(KeyTokenizein );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( KeyTokenizewrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve KeyTokenizetext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void KeyTokenizerestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        KeyTokenizeensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            KeyTokenize_create_buffer(KeyTokenizein,YY_BUF_SIZE );
	}

	KeyTokenize_init_buffer(YY_CURRENT_BUFFER,input_file );
	KeyTokenize_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void KeyTokenize_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		KeyTokenizepop_buffer_state();
	 *		KeyTokenizepush_buffer_state(new_buffer);
     */
	KeyTokenizeensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	KeyTokenize_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (KeyTokenizewrap()) processing, but the only time this flag
	 * is looked at is after KeyTokenizewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void KeyTokenize_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	KeyTokenizein = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE KeyTokenize_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) KeyTokenizealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in KeyTokenize_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) KeyTokenizealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in KeyTokenize_create_buffer()" );

	b->yy_is_our_buffer = 1;

	KeyTokenize_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with KeyTokenize_create_buffer()
 * 
 */
    void KeyTokenize_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		KeyTokenizefree((void *) b->yy_ch_buf  );

	KeyTokenizefree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a KeyTokenizerestart() or at EOF.
 */
    static void KeyTokenize_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	KeyTokenize_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then KeyTokenize_init_buffer was _probably_
     * called from KeyTokenizerestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void KeyTokenize_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		KeyTokenize_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void KeyTokenizepush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	KeyTokenizeensure_buffer_stack();

	/* This block is copied from KeyTokenize_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from KeyTokenize_switch_to_buffer. */
	KeyTokenize_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void KeyTokenizepop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	KeyTokenize_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		KeyTokenize_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void KeyTokenizeensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)KeyTokenizealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in KeyTokenizeensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)KeyTokenizerealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in KeyTokenizeensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE KeyTokenize_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) KeyTokenizealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in KeyTokenize_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	KeyTokenize_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to KeyTokenizelex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       KeyTokenize_scan_bytes() instead.
 */
YY_BUFFER_STATE KeyTokenize_scan_string (yyconst char * yystr )
{
    
	return KeyTokenize_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to KeyTokenizelex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE KeyTokenize_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) KeyTokenizealloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in KeyTokenize_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = KeyTokenize_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in KeyTokenize_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up KeyTokenizetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		KeyTokenizetext[KeyTokenizeleng] = (yy_hold_char); \
		(yy_c_buf_p) = KeyTokenizetext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		KeyTokenizeleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int KeyTokenizeget_lineno  (void)
{
        
    return KeyTokenizelineno;
}

/** Get the input stream.
 * 
 */
FILE *KeyTokenizeget_in  (void)
{
        return KeyTokenizein;
}

/** Get the output stream.
 * 
 */
FILE *KeyTokenizeget_out  (void)
{
        return KeyTokenizeout;
}

/** Get the length of the current token.
 * 
 */
int KeyTokenizeget_leng  (void)
{
        return KeyTokenizeleng;
}

/** Get the current token.
 * 
 */

char *KeyTokenizeget_text  (void)
{
        return KeyTokenizetext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void KeyTokenizeset_lineno (int  line_number )
{
    
    KeyTokenizelineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see KeyTokenize_switch_to_buffer
 */
void KeyTokenizeset_in (FILE *  in_str )
{
        KeyTokenizein = in_str ;
}

void KeyTokenizeset_out (FILE *  out_str )
{
        KeyTokenizeout = out_str ;
}

int KeyTokenizeget_debug  (void)
{
        return KeyTokenize_flex_debug;
}

void KeyTokenizeset_debug (int  bdebug )
{
        KeyTokenize_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from KeyTokenizelex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    KeyTokenizein = stdin;
    KeyTokenizeout = stdout;
#else
    KeyTokenizein = (FILE *) 0;
    KeyTokenizeout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * KeyTokenizelex_init()
     */
    return 0;
}

/* KeyTokenizelex_destroy is for both reentrant and non-reentrant scanners. */
int KeyTokenizelex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		KeyTokenize_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		KeyTokenizepop_buffer_state();
	}

	/* Destroy the stack itself. */
	KeyTokenizefree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * KeyTokenizelex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *KeyTokenizealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *KeyTokenizerealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void KeyTokenizefree (void * ptr )
{
	free( (char *) ptr );	/* see KeyTokenizerealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 212 "KeyTokenize.ll"



